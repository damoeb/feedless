mutation createRepositories($data: [RepositoryCreateInput!]!) {
  createRepositories(data: $data) {
    ...RepositoryFragment
  }
}

mutation deleteRepository($data: RepositoryUniqueWhereInput!) {
  deleteRepository(data: $data)
}

query listRepositories($data: RepositoriesInput!) {
  repositories(data: $data) {
    ...RepositoryFragment
    frequency(groupBy: createdAt) {
      count
      group
    }
  }
}
query listPublicRepositories($data: RepositoriesInput!) {
  repositories(data: $data) {
    id
    ownerId
    title
    description
    product
    visibility
    tags
    createdAt
    lastUpdatedAt
    nextUpdateAt
    refreshCron
    pullsPerMonth
    disabledFrom
    archived
    documentCount
  }
}

query countRepositories($data: CountRepositoriesInput!) {
  countRepositories(data: $data)
}

fragment RepositoryFull on Repository {
  ...RepositoryFragment
  frequency(groupBy: createdAt) {
    count
    group
  }
  #  harvests {
  #    startedAt
  #    finishedAt
  #    itemsAdded
  #    itemsIgnored
  #    logs
  #  }
  sourcesCount
  sources(data: $data) {
    ...SourceFragment
  }
}

query repositoryById(
  $repository: RepositoryWhereInput!
  $sources: SourcesInput
) {
  repository(data: $repository) {
    ...RepositoryFragment
    frequency(groupBy: createdAt) {
      count
      group
    }
    sourcesCount
    sources(data: $sources) {
      ...SourceFragment
    }
    annotations {
      votes {
        id
        flag {
          value
        }
        upVote {
          value
        }
        downVote {
          value
        }
      }
    }
  }
}

query sourcesByRepository(
  $repository: RepositoryWhereInput!
  $sources: SourcesInput
) {
  repository(data: $repository) {
    sources(data: $sources) {
      ...SourceFragment
    }
  }
}

mutation updateRepository(
  $data: RepositoryUpdateInput!
  $sources: SourcesInput
) {
  updateRepository(data: $data) {
    ...RepositoryFragment
    frequency(groupBy: createdAt) {
      count
      group
    }
    sourcesCount
    sources(data: $sources) {
      ...SourceFragment
    }
    annotations {
      votes {
        id
        flag {
          value
        }
        upVote {
          value
        }
        downVote {
          value
        }
      }
    }
  }
}
